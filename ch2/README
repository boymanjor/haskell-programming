Chapter 2: Hello, Haskell!

"Functions are beacons of constancy in a sea of turmoil." - Mike Hammond

-- Summary --

Haskell code can be written directly into the GHCi REPL (read-eval-print-loop)
or stored in source files. The source files can be compiled using the GHCi
compiler or loaded into the REPL. The REPL allows types and other information
about expression to be queried with the `:type` and `:info` commands. The Haskell
Tool Stack `stack` is used to initiate: the REPL, code compliation, and many other
tools when writing code.

A Haskell program can be thought of one as single expression composed of many,
smaller expressions. A declaration binds an expresson to a variable name. These
expression can be reduced/evaluted to a normal form. This can also be thought
of as 'normalizing' or 'executing' an expression.

Functions are the most basic unit of a Haskell program. Like in lambda calculus,
each function binds one parameter and can be applied to one argument. Syntatic sugar
is used to declare functions which are applied to multiple arguments. These functions
are really a series of nested functions which accept one argument and return a function,
which accepts the next argument in line.

Function declarations consist of:
- function name
- list of parameters (syntatic sugar allows for more than one)
- an equal sign
- function body (an expression that can be evaluated)

Evaluation is the process of reducing the expression to its simplest form.
Haskell uses "lazy" or "non-strict" evaluation. This means an expression
is not evaluated until absolutely necessary. Values are in their simplest form
but function applications are reducible. Like in lambda calculus, function
application is reduction/evaluation.


-- Terminology & Concepts --

:: - This operator is used to define type signatures. It means "has the type."

$ - This operator everything to the right of it to be evaluated first. It can
be used to delay function application. The "$" operator can be used multiple
times within a single expression.

Declaration - Top-level bindings that allow us to name expressions.

Expression - Everything in Haskell is an expression or declaration. An expression
consists of: a value, a combination of values, and/or functions applied to values.
They are the building blocks of programs, and programs are one big expression made
of simpler expressions.

Redexes - Reducible expressions. When an expression cannot be reduced anymore it
is in "normal form." This directly translates to the beta normal form of the
lambda calculus.

Negation - Using the (-) operator for number negation is syntatic sugar.
The `negate` function is the proper way to negate numeric values.

Let vs. Where - Both are used to create local, variable bindings. `let` is an
expression and can be used anywhere an expression can be used. `where` is a
declaration and is bound to a surrounding syntatic construct.

Operators - Operators are functions which can be used in infix style. All operators
can be used with prefix style by surrounding them with parenthesis, e.g. (+) 1 2.
Operators also have associativity and precedence. These follow similar rules to
traditional math operations. Parenthesis can be used to group expressions and
manipulate operator precedence.

Partial Application - A function which takes multiple arguments can have some
of its arguments applied. This will result in a new function being returned
which is "partially" applied and will accept the remaining arguments.

Scope - Scope is the area of source code where a particular binding of a
variable applies. Haskell is lexically scoped, which means scoping is dependent
upon source code location.

Sectioning - The partial application of infix operators to one of their arguments.
This can be used to pass around partially applied functions. E.g. (+) 1 2 can be
written as (+1) 2. We could also declare an expression x = (+1) and apply x to
any value we wish to be the second operand.

Syntax - The grammar and structure of the text we use to write code.

Syntatic sugar - Syntatic sugar is a syntax which allows for code to be written in
a more concise and/or readable manner. It does not change the semantics (meaning)
of the code.

Whitespace - Whitespace matters in Haskell. Specifically code indentation.
The basic rule is that code that is a part of an expression should be
indented below the beginning of the expression. This applies even if the
expression begins mid-line.

-- Follow-up Resources --

1. Haskell wiki article on Let vs. Where
   https://wiki.haskell.org/Let_vs._Where

2. How to desugar Haskell code; Gabriel Gonzalez
