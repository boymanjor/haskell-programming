Chapter 13: Building projects

"Wherever there is modularity there is the potential for misunderstanding: Hiding
information implies a need to check communication." - Alan Perlis

-- Notes --

Haskell programs are organized into modules. Modules contain the datatypes, type
aliases, typeclasses, typeclass instances, and values defined at the top-level.
Modules allow other modules to be imported as well as provide a mechanism for
exporting code to other modules. They are the same as namespaces in other langs.

The Haskell Cabal, or Common Architecture for Building Applications and Libraries,
is a package manager. We can define properties for a project's build process
in [project-name].cabal files in the root of the project directory. The following
is a sample file.

  name:                hello
  version:             0.1.0.0
  synopsis:            Simple project template from stack
  description:         Please see README.md
  homepage:            https://github.com/bitemyapp/hello#readme
  license:             BSD3
  license-file:        LICENSE
  author:              Your Name Here
  maintainer:          example@email.com
  copyright:           2016, Your Name Here
  category:            Web
  build-type:          Simple
  cabal-version:       >=1.10

  executable hello
    hs-source-dirs:      src
    main-is:             Main.hs
    default-language:    Haskell2010
    build-depends:       base >= 4.7 && < 5

Note: we have an `executable` stanza which defines rules for creating
an executable binary. If our project is intended to be used as a library
we must include a `library` stanza.

By default, all top-level bindings are exported from a module. To specify
which bindings can be imported by another module we can define an export
list, e.g.

  module Hello
    ( sayHello )
    where

  sayHello :: IO ()
  sayHello =
    putStrLn "hello world"

We can also use explicit imports to restrict a module import to the specific
bindings we need in our code, e.g.

  import Data.Bool (bool)

  -- can use bool

Haskell also provideds qualified imports. This helps us deal with name collisions
due to imported bindings.

  import qualified Datal.Bool (bool)
  -- must use Data.Bool.bool

We can also use aliases for our qualified module imports.

  import qualified Data.Bool as B
  --  must use B.bool

-- Terminology & Concepts --

do notation - A `do` block is convenient syntatic sugar that allows for sequencing
IO actions. Specifically, do syntax allows us to sequence monadic actions. This is
explained more in a later chapter on Monads. It is also important to note that since
do syntax is syntactic sugar, its behavior can be defined in another way.

(<-) - `bind` is used to bind a variable but works within the context of a `do` block.
Particularly, it assigns a name to type argument of a monadic structure. In the case of
getLine :: IO String, (<-) will bind the resulting string value to a variable within the
scope of its surrounding `do` block.

return - return is a function that is used to return a value in IO. For instance, if a
function has IO Bool the resulting bool value must be passed as an argument to `return`.
