Chapter 9: Lists

"If the doors of perception were cleansed, everything would appear to man as it
is - infiinte" - William Blake

-- Notes --

Lists serve as a way to refer to and process a collection of values and as an
infinite series of values, usually generated by a function, that can act as a
stream datatype.

`data [] a = [] | a : [a]`

The above data declaration defines `[]` as a type constructor and data constructor
for the list type. The first data constructor represents an empty list. The second
data constructor (:) takes two arguments and is known as the "cons" operator. It
adds the first argument to a list containing arguments of a simiar type.

Pattern matching against a list uses the (:) operator to distinguish the head
element of a list from the remaining tail.

Lists use syntactic sugar to allow building without the use of successive (:)
applications. This includes using concat or the (++) operator to combine lists
and declaring lists using [x, y, z] syntax.

Ranges are one of the simplest ways to construct lists. We can use the range
synaxt, e.g. [1..10] or [1,3..10], or the equivalent functions within the Enum
typeclass, e.g. `enumFromTo 1 10` or `enumFromThenTo 1 3 10`
functions or (..)
-- Terminology & Concepts --

-- Follow-up Resources --
