Chapter 10: Foldable lists

"The explicit teaching of thinking is no trivial task, but who said that the
teaching of programming is? In our terminology, the more explicitly thinking
is taught, the more of a scientist the programmer will become." - Edsger Dijkstra

-- Notes --

Folds as a general concept are called catamorphishms. Catamorphisms are a
means of deconstructing data. Folds are introduced through lists but can
be applied to many different structures.

Folding happens in two stages, traversal and folding. Traversal is the stage
in which the fold recurses along the spine of the data structure. Folding is
the stage where the folding function is applied to all the values. This results
in a reduction/evaluation of the result.

The function `foldr` can be thought of as a `reduce` in JS. There is a `foldl`
as well. Both functions recurse over the spine in the same direction; the difference
is which way the nested operations are associated.

Because Haskell is nonstrict (lazy evaluation) we can use `foldr` with a folding
function that does not force evaluation on the recursive call to operate on
infinite lists, e.g.

-- definition of any function
any :: (a -> Bool) -> [a] -> Bool
any f xs =
  foldr (\x b -> f x || b) False xs

-- sample execution using an infinite list

any' even [1..]
  = foldr (\x b -> f x || b) False [1..]
  = foldr f' False [1..]

foldr f' False [1..]
  = f' 1 (foldr f' False [2..])
  = even 1 || (foldr f' False [2..])
  = foldr f' False [2..]

foldr f' False [2..]
  = f' 2 (foldr f' False [3..])
  = even 2 || (foldr f' False [3..])
  = True

The above function call would result in a bottom value if called with (repeat 1)
because a `True` value would never trigger the (||) short circuit. Thus, the
recursive `foldr` call would continue forever.

We can use scan functions to see how folds evaluate. They work similarly to their
fold counterpars, but return a list of intermediate stages of the fold.

last (scanl f z xs) = foldl f z xs
head (scanr f z xs) = foldr f z xs

The difference between foldr and foldl is illuminated when the folding function
is not associative. It is important to remember that the fundamental way to think
about evaluation in Haskell is as substitution.

foldr (^) 2 [1..3]
(^) 1 ((^) 2 ((^) 3 2))
(^) 1 ((^) 2 9)
(^) 1 512
1

foldl (^) 2 [1..3]
(^) ((^) ((^) 2 1) 2) 3
(^) ((^) 2 2) 3
(^) 4 3
64

foldl (flip const) 0 [1..5]
(flip const (flip const (flip const (flip const (flip const 0 1) 2) 3) 4) 5)
