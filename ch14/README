Chapter 14: Testing

"We've tended to forget that no computer will ever ask a new question."
                                                - Grace Murray Hopper

-- Notes --

While well-specified types can enable programmers to avoid many obvious and
tedious tests, there is still value to be obtained in executable specifications.
Hspec and QuickCheck are two reputable testing libraries that exist in the
Haskell ecosystem. These deal with spec testing. There is also a Hunit library
that handles unit testing.

The book proposes two branches of testing: unit and property. Unit testing (and spec)
assert the correctness of individual functions. Property testing deals with the
formal properties of program. You define a truth-valued, universally quantified
function and test it against randomly generated inputs. The QuickCheck library
facilitates the generation of the random input. It helps a programmer ensure that
code has met the min. requirements to satisfy laws, e.g. the laws of monads, or
basic associativity.

Hspec uses `do` blocks to allow assertions on the outputs of functions given specified
inputs, e.g.

  main :: IO ()
  main = hspec $ do
    -- description of tests
    describe "Addition" $ do
      -- description of function behavior
      it "1 + 1 is greater than 1" $ do
        -- assertion goes here
        1 + 1 > 1 `shouldBe` True

The QuickCheck library provides randomly generated inputs (100 by default). Again,
it can be used for property based testing, e.g.

  main :: IO ()
  main = hspec $ do
    -- description of tests
    describe "Addition" $ do
      -- description of function behavior
      it "x + 1 should always be greater than x" $ do
        -- Type assertion tells QuickCheck what types of values to generate.
        property $ \x -> x + 1 > (x :: Int)

It also utilizes the `Arbitrary` typeclass and a newtype `Gen` to generate the
random data. The relevant pieces are:

  arbitrary :: Arbitrary a => Gen a
  sample  :: Show a => Gen a -> IO ()
  sample' :: Gen a -> IO [a]

To generate random Int values we could run the following:

  sample (arbitrary :: Gen Int)

   -- or to generate a list
  sample' (arbitrary :: Gen Int)

Above `arbitrary` is a value used to generate random values. We can specify our own data
for generating Gen values, e.g

  trivialInt :: Gen Int
  trivialInt = return 1

Remember that `return` is used to wrap a value with a Monad. In this case `Gen` is said
Monad.

  return :: Monad m => a -> m a

We can specify many different functions that return `Gen a` values. The QuickCheck provides
the following functions to help:

  choose :: System.Random.Random a => (a, a) -> Gen a
  elements :: [a] -> Gen a

To create tuples of `Gen` values we can use the following pattern:

  genTuple :: (Arbitrary a, Arbitrary b) => Gen (a, b)
  genTuple = do
    a <- arbitrary
    b <- arbitrary
    return (a, b)

  -- add a type assertion on the types of values to inhabit tuple
  -- the only requirement is that the type have an instance of Arbitrary
  sample (genTuple :: Gen(Int, Float))

  -- We can also generate Maybe and Either values
  genEither :: (Arbitrary a, Arbitrary b)
            => Gen (Either a b)
  genEither = do
    a <- arbitrary
    b <- arbitrary
    choose (Left a, Right b)

  genMaybe :: Arbitrary a => Gen (Maybe a)
  genMaybe = do
    a <- arbitrary
    choose (Nothing, Just a)

  genMaybe' :: Arbitrary a => Gen (Maybe a)
  genMaybe' = do
    a <- arbitrary
    frequency [ (1, return Nothing)
              , (3, return (Just a))]

  -- frequency :: [(Int, Gen a)] -> Gen a

We can also use QuickCheck without hspec. If we define a function with a type
signature resembling an assert we can pass the function to `quickCheck` as an argument.

  prop_additionGreater :: Int -> Bool
  prop_additionGreater x = x + 1 > x

  runQc :: IO ()
  runQc = quickCheck prop_additionGreater

An important part of using the QuickCheck library is learning how to write
instances of the Arbitrary typeclass for your custom datatypes.

  data Trivial =
    Trivial
    deriving (Eq, Show)

  trivialGen :: Gen Trivial
  trivialGen = return Trivial

  instance Arbitrary Trivial where
    arbitrary = trivialGen

The above is a very trivial example. A more involved example follows:

  import Test.QuickCheck
  import Test.QuickCheck.Gen (oneof)

  data Sum a b =
      First a
    | Second b
    deriving (Eq, Show)

  sumGen :: (Arbitrary a, Arbitrary b)
         => Gen (Sum a b)

  sumGen = do
    a <- arbitrary
    b <- arbitrary
    oneof [return $ First a, return $ Second b]

  instance (Arbitrary a, Arbitrary b) => Arbitrary (Sum a b) where
    arbitrary = sumGen

CoArbitrary is a counterpartto Arbitrary which allows us to generate functions,
opposed to values.

  coarbitrary :: CoArbitrary a =>
                 a -> Gen b -> Gen b

As long as a datatype has a Generic instance we can get a CoArbitrary instance for
free, e.g.

  {-# LANGUAGE DeriveGeneric #-}

  module CoArbitrary where

  import GHC.Generics
  import Test.QuickCheck

  data Bool' =
      True'
    | False'
    deriving (Generic)

  instance CoArbitrary Bool'

Which allows us to do the following:

  trueGen :: Gen Int
  trueGen = coarbitrary True' arbitrary

Essentially allowing us to generate random functions.
